# .github/workflows/check_minecraft_release.yml

name: Check for new Minecraft Release

on:
  # Bu workflow'u Actions sekmesinden manuel olarak çalıştırmanı sağlar
  workflow_dispatch:

  # Belirtilen zamanda otomatik olarak çalışmasını sağlar
  schedule:
    # Her gün UTC saatiyle 08:00'de çalışır (Türkiye saatiyle yaklaşık 11:00)
    - cron: '0 8 * * *'

jobs:
  check-for-update:
    name: Check for New Minecraft Release
    runs-on: ubuntu-latest
    steps:
      # Adım 1: Mojang API'sinden en son ana sürüm numarasını al ve doğrula
      - name: Get and verify latest Minecraft release version
        id: get_version
        run: |
          MANIFEST_DATA=$(curl -sL https://launchermeta.mojang.com/mc/game/version_manifest.json)
          LATEST_VERSION=$(echo "${MANIFEST_DATA}" | jq -r '.latest.release')
          
          # HATA KONTROLÜ: Sürüm numarasının boş veya "null" olup olmadığını kontrol et
          if [ -z "$LATEST_VERSION" ] || [ "$LATEST_VERSION" == "null" ]; then
            echo "::error::Failed to fetch a valid Minecraft release version. API response might have changed."
            exit 1
          fi
          
          echo "Latest Minecraft release is: ${LATEST_VERSION}"
          echo "version=${LATEST_VERSION}" >> $GITHUB_OUTPUT
          
          # Önbellek için işaret dosyasını oluştur
          touch "${LATEST_VERSION}.processed"

          # HATA AYIKLAMA: Dosyanın doğru oluşturulduğunu görmek için listele
          echo "Listing files in current directory to verify:"
          ls -la

      # Adım 2: Bu sürümün daha önce işlenip işlenmediğini önbellek (cache) ile kontrol et
      - name: Check if this version has been processed before
        id: cache-check
        uses: actions/cache@v4
        with:
          # Önbelleğe alınacak/kontrol edilecek dosyanın yolu
          path: ${{ steps.get_version.outputs.version }}.processed
          
          # Önbellek için benzersiz ve daha spesifik bir anahtar
          key: ${{ runner.os }}-minecraft-release-${{ steps.get_version.outputs.version }}

      # Adım 3: Eğer sürüm yeniyse (önbellekte bulunamadıysa) Python script'ini çalıştır
      - name: Checkout repository
        if: steps.cache-check.outputs.cache-hit != 'true'
        uses: actions/checkout@v4

      - name: Set up Python
        if: steps.cache-check.outputs.cache-hit != 'true'
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Run Python script for new version
        if: steps.cache-check.outputs.cache-hit != 'true'
        env:
          NEW_VERSION: ${{ steps.get_version.outputs.version }}
        run: |
          echo "✅ New Minecraft version found: $NEW_VERSION. Running main.py..."
          # python -m pip install -r requirements.txt
          python main.py

      # Adım 4: Eğer sürüm yeni değilse bilgilendirme mesajı yazdır
      - name: No new version found
        if: steps.cache-check.outputs.cache-hit == 'true'
        run: echo "No new Minecraft release. The latest version (${{ steps.get_version.outputs.version }}) has already been processed."
