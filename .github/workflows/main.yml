# .github/workflows/check_minecraft_release.yml

name: Check for new Minecraft Release

on:
  workflow_dispatch:
  schedule:
    - cron: '0 8 * * *'

jobs:
  check-version:
    name: Check latest Minecraft release
    runs-on: ubuntu-latest
    outputs:
      latest_version: ${{ steps.version_info.outputs.latest_version }}
      should_run: ${{ steps.should_run.outputs.should_run }}
    steps:
      - name: Get latest Minecraft release
        id: version_info
        run: |
          MANIFEST_DATA=$(curl -sL https://launchermeta.mojang.com/mc/game/version_manifest.json)
          LATEST_VERSION=$(echo "${MANIFEST_DATA}" | jq -r '.latest.release')

          if [ -z "$LATEST_VERSION" ] || [ "$LATEST_VERSION" == "null" ]; then
            echo "::error::Failed to fetch Minecraft version"
            exit 1
          fi

          echo "Latest version is: $LATEST_VERSION"
          echo "latest_version=${LATEST_VERSION}" >> $GITHUB_OUTPUT

      - name: Load version from cache
        id: version_check
        uses: actions/cache@v4
        with:
          path: .version.txt
          key: minecraft-release-${{ steps.version_info.outputs.latest_version }}

      - name: Save new version marker
        if: steps.version_check.outputs.cache-hit != 'true'
        run: echo "${{ steps.version_info.outputs.latest_version }}" > .version.txt

      - name: Decide whether to run script
        id: should_run
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] || [ "${{ steps.version_check.outputs.cache-hit }}" != "true" ]; then
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi

  run-script:
    name: Run Python for new release
    needs: check-version
    if: needs.check-version.outputs.should_run == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Run Python script
        env:
          NEW_VERSION: ${{ needs.check-version.outputs.latest_version }}
        run: |
          echo "✅ New Minecraft version found: $NEW_VERSION"
          # python -m pip install -r requirements.txt
          python main.py

  no-new-version:
    name: No new release
    needs: check-version
    if: needs.check-version.outputs.should_run == 'false'
    runs-on: ubuntu-latest
    steps:
      - run: echo "ℹ️ No new Minecraft release. Latest is ${{ needs.check-version.outputs.latest_version }}"
